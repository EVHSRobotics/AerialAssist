/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.wpi.first.wpilibj.templates.commands;

import edu.wpi.first.wpilibj.Timer;

/**
 *
 * @author Justin
 */
public class TankDrive extends CommandBase {
      public final double DEADBAND = .3;
    private final double SENSITIVITY =.6;
    public double leftY;
    public double rightY;
    public double twist;
    public double angle;    
    public TankDrive() {

        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(driveTrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
   
    leftY = SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(2), DEADBAND);
    rightY = SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(5), DEADBAND);
    twist = .6*SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(3), DEADBAND); //double deadband
   angle = driveTrain.gyro.getAngle();
 
    driveTrain.backLeft.set(leftY);
    driveTrain.frontLeft.set(leftY);
    driveTrain.backRight.set(-rightY);
    driveTrain.frontRight.set(-rightY);
    //driveTrain.mecanumDrive.tankDrive(leftY, rightY, true);
      
    }
 

//    Robot.oi.getJoystick().getTwist());
    

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
     }
    
    private double fixDeadBand(double speed, double deadBand) {
        return (Math.abs(speed) > deadBand ? speed : 0.0);
    }
}
