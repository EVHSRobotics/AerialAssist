/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.wpi.first.wpilibj.templates.commands;

/**
 *
 * @author Justin
 */
public class MecanumDrive extends CommandBase {
    
   public final double DEADBAND = .3;
    private final double SENSITIVITY =.6;
    public double xValue;
    public double yValue;
    public double twist;
    public double angle;
    public MecanumDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(driveTrain);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
//            yValue = SENSITIVITY*fixDeadBand(oi.getJoystick().getY(), DEADBAND);
//    xValue = SENSITIVITY*fixDeadBand(oi.getJoystick().getX(), DEADBAND);
//    twist = .6*SENSITIVITY*fixDeadBand(oi.getJoystick().getZ(), DEADBAND); 
     
    yValue = SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(5), DEADBAND);
    xValue = SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(4), DEADBAND);
    twist = .6*SENSITIVITY*fixDeadBand(oi.controller.getRawAxis(3), DEADBAND); //double deadband
   angle = driveTrain.gyro.getAngle();
 
    if (oi.getGyroReset()){
        driveTrain.gyro.reset();
       
    }
    driveTrain.mecDrive(xValue, -yValue, -twist, -angle);
//   driveTrain.mecanumDrive.mecanumDrive_Cartesian(-xValue, 
//           -yValue, -twist,angle); //x,y,rotation,gyroAngle
//     driveTrain.mecanumDrive.mecanumDrive_Polar(-SENSITIVITY*fixDeadBand(oi.getJoystick().getMagnitude(),
// DEADBAND), -SENSITIVITY*fixDeadBand( oi.getJoystick().getDirectionDegrees(),DEADBAND), -SENSITIVITY*
//         fixDeadBand(oi.getJoystick().getTwist(), DEADBAND*2));
    
    //forward - left back (yValue negative)
    //backward - right forward
    //right - 
    
    //twist, xValue, yValue
     
    if(Math.abs(xValue + yValue + twist) > 0){
        System.out.println("GYRO: " + angle);
        System.out.println("X: " + xValue + " Y: " + yValue + " T: " + twist);
//        System.out.println("FL: "+ driveTrain.frontLeft.get() + " BL: " +
//                driveTrain.backLeft.get() + " FR: " + driveTrain.frontRight.get() + " BR: " +
//                driveTrain.backRight.get());
      
    }
 

//    Robot.oi.getJoystick().getTwist());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
     }
    
    private double fixDeadBand(double speed, double deadBand) {
        return (Math.abs(speed) > deadBand ? speed : 0.0);
    }
}
