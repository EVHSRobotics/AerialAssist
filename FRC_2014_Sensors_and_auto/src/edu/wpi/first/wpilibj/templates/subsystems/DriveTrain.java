// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package edu.wpi.first.wpilibj.templates.subsystems;


import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.templates.RobotMap;
import edu.wpi.first.wpilibj.templates.commands.MecanumDrive;

/**
 *
 */
public class DriveTrain extends Subsystem {
    //motors
    public Victor backRight;
    public Victor frontRight;
    public Victor backLeft;
    public Victor frontLeft;
    public Gyro gyro; //gyro
    
    public boolean autoRunning; //shows whether autonomous is running
    
    public DriveTrain(){
        //creates motors and gyro
        backRight = new Victor(RobotMap.RIGHT_MOTOR_BACK);
        frontRight = new Victor(RobotMap.RIGHT_MOTOR_FRONT);
        backLeft = new Victor(RobotMap.LEFT_MOTOR_BACK);
        frontLeft = new Victor(RobotMap.LEFT_MOTOR_FRONT);
        gyro = new Gyro(RobotMap.GYRO_PORT);
    }
    
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new MecanumDrive()); //command runs mecanum drive by default
    }
    
    //commands to test if each motor is assigned correctly
    public void rightFrontMove(double speed){ 
        frontRight.set(speed);
    }
    public void rightBackMove(double speed){
        backRight.set(speed);
    }
    public void leftFrontMove(double speed){
        frontLeft.set(speed);
    }
    public void leftBackMove(double speed){
        backLeft.set(speed);
    }

public void mecDrive(double x, double y, double t, double a){
    double temp = y*Math.cos(Math.toRadians(a)) - x*Math.sin(Math.toRadians(a)); //adjusts yValue based on angle
    x = y*Math.sin(Math.toRadians(a)) + x*Math.cos(Math.toRadians(a)); //adjusts xValue based on angle
    y = temp; //assigns yValue to calculated value (temp was used so altered yValue not used for x calculations)

    //calculates output for each motor
    double front_left = y + t + x; 
    double front_right = y - t - x;
    double back_left = y + t - x;
    double back_right = y - t + x;
    
    //ensures no value is greater than 1; normalizes values
    double max = Math.abs(front_left);
    if (Math.abs(front_right)>max) {
        max = Math.abs(front_right);
    }
    if (Math.abs(back_left)>max){
        max=Math.abs(back_left);
    }
    if (Math.abs(back_right)>max) {
        max=Math.abs(back_right);
    }
    if (max>1){
      front_left/=max; front_right/=max; back_left/=max; back_right/=max;
    }
    
    if(Math.abs(x+y+t) > 0){ 
        System.out.println("DriveX: " +x + " DriveY: " + y); //diagnostic
    }    
    
    frontLeft.set(-front_left); //inverts motor
    frontRight.set(front_right);
    backRight.set(back_right);
    backLeft.set(-back_left); //inverts motor
}
}
